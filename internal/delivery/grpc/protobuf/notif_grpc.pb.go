// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	types "github.com/Durudex/durudex-notif-service/internal/delivery/grpc/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NotifServiceClient is the client API for NotifService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotifServiceClient interface {
	UserCode(ctx context.Context, in *UserCodeRequest, opts ...grpc.CallOption) (*types.Status, error)
	UserLoggedIn(ctx context.Context, in *UserLoggedInRequest, opts ...grpc.CallOption) (*types.Status, error)
	UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*types.Status, error)
}

type notifServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifServiceClient(cc grpc.ClientConnInterface) NotifServiceClient {
	return &notifServiceClient{cc}
}

func (c *notifServiceClient) UserCode(ctx context.Context, in *UserCodeRequest, opts ...grpc.CallOption) (*types.Status, error) {
	out := new(types.Status)
	err := c.cc.Invoke(ctx, "/durudex.notif.NotifService/UserCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifServiceClient) UserLoggedIn(ctx context.Context, in *UserLoggedInRequest, opts ...grpc.CallOption) (*types.Status, error) {
	out := new(types.Status)
	err := c.cc.Invoke(ctx, "/durudex.notif.NotifService/UserLoggedIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifServiceClient) UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...grpc.CallOption) (*types.Status, error) {
	out := new(types.Status)
	err := c.cc.Invoke(ctx, "/durudex.notif.NotifService/UserRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifServiceServer is the server API for NotifService service.
// All implementations must embed UnimplementedNotifServiceServer
// for forward compatibility
type NotifServiceServer interface {
	UserCode(context.Context, *UserCodeRequest) (*types.Status, error)
	UserLoggedIn(context.Context, *UserLoggedInRequest) (*types.Status, error)
	UserRegister(context.Context, *UserRegisterRequest) (*types.Status, error)
	mustEmbedUnimplementedNotifServiceServer()
}

// UnimplementedNotifServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNotifServiceServer struct {
}

func (UnimplementedNotifServiceServer) UserCode(context.Context, *UserCodeRequest) (*types.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCode not implemented")
}
func (UnimplementedNotifServiceServer) UserLoggedIn(context.Context, *UserLoggedInRequest) (*types.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLoggedIn not implemented")
}
func (UnimplementedNotifServiceServer) UserRegister(context.Context, *UserRegisterRequest) (*types.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRegister not implemented")
}
func (UnimplementedNotifServiceServer) mustEmbedUnimplementedNotifServiceServer() {}

// UnsafeNotifServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotifServiceServer will
// result in compilation errors.
type UnsafeNotifServiceServer interface {
	mustEmbedUnimplementedNotifServiceServer()
}

func RegisterNotifServiceServer(s grpc.ServiceRegistrar, srv NotifServiceServer) {
	s.RegisterService(&NotifService_ServiceDesc, srv)
}

func _NotifService_UserCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifServiceServer).UserCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/durudex.notif.NotifService/UserCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifServiceServer).UserCode(ctx, req.(*UserCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifService_UserLoggedIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoggedInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifServiceServer).UserLoggedIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/durudex.notif.NotifService/UserLoggedIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifServiceServer).UserLoggedIn(ctx, req.(*UserLoggedInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifService_UserRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifServiceServer).UserRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/durudex.notif.NotifService/UserRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifServiceServer).UserRegister(ctx, req.(*UserRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotifService_ServiceDesc is the grpc.ServiceDesc for NotifService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotifService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "durudex.notif.NotifService",
	HandlerType: (*NotifServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserCode",
			Handler:    _NotifService_UserCode_Handler,
		},
		{
			MethodName: "UserLoggedIn",
			Handler:    _NotifService_UserLoggedIn_Handler,
		},
		{
			MethodName: "UserRegister",
			Handler:    _NotifService_UserRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/delivery/grpc/protobuf/notif.proto",
}
